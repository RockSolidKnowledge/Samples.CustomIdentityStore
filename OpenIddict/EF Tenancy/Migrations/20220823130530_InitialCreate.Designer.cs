// <auto-generated />
using EF_Tenancy.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Tenancy.Migrations
{
    [DbContext(typeof(CustomIdentityDb))]
    [Migration("20220823130530_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EF_Tenancy.EntityFramework.Tenant", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantUserUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TenantUserUserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantClaimType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserEditable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegularExpressionValidationFailureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegularExpressionValidationRule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClaimTypes");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantEnumClaimTypeValue", b =>
                {
                    b.Property<string>("ClaimTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenantClaimTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClaimTypeId", "Value");

                    b.HasIndex("TenantClaimTypeId");

                    b.ToTable("EnumClaimTypeAllowedValues");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("TenantName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TenantRoleTenantUser", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("TenantRoleTenantUser");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantClaim", b =>
                {
                    b.HasOne("EF_Tenancy.EntityFramework.TenantUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("TenantUserUserId");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantEnumClaimTypeValue", b =>
                {
                    b.HasOne("EF_Tenancy.EntityFramework.TenantClaimType", null)
                        .WithMany("AllowedValues")
                        .HasForeignKey("TenantClaimTypeId");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantUser", b =>
                {
                    b.HasOne("EF_Tenancy.EntityFramework.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantName");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TenantRoleTenantUser", b =>
                {
                    b.HasOne("EF_Tenancy.EntityFramework.TenantRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Tenancy.EntityFramework.TenantUser", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantClaimType", b =>
                {
                    b.Navigation("AllowedValues");
                });

            modelBuilder.Entity("EF_Tenancy.EntityFramework.TenantUser", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
